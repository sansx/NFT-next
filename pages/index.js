import { ConnectButton } from '@rainbow-me/rainbowkit';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useRef, useState, useEffect } from "react"
import CampaignERC721Abi from "contracts/CampaignERC721Abi.json"
import CampaignERC721Bytecode from "contracts/CampaignERC721Bytecode.json"
import { useNetwork, useSigner, useAccount, usePrepareContractWrite, useContractWrite } from 'wagmi'
import { ContractFactory, Wallet, utils } from 'ethers'

const Home = () => {
  const [formData, setFormData] = useState(null)
  const [showLoading, setShowLoading] = useState(false)
  const [contractAddress, setContractAddress] = useState(null)
  const { data, error, isLoading, refetch } = useSigner()
  const { address, isConnecting, isDisconnected } = useAccount()
  const [signMessage, setSignMessage] = useState(null)
  const [message, setMessage] = useState()
  const prepareContractWrite = usePrepareContractWrite({
    address: contractAddress,
    abi: CampaignERC721Abi,
    functionName: 'mintNFTCampaign',
    args: [
      "0x63c5071b57273ebfcd1c0a44", [
        "0x3f47ad8d93d448f57d4ff907dc52ee91d2450c100293b0b86c5edabc499e8d31",
        "0x751881662ed3243eb8ff036e6057ce9cc4be435a65692d135a6571524c189fe9",
        "0x91dd1ca93a01f038e59c58f1649eb4031363ed4b2d596cb18637e1db136e78b7",
        "0x22b2cdee75463e25d6db63958804a0c9f0680edecfb818523fa4bf426bad5036"
      ], signMessage, address, "https://nft-next-xi.vercel.app/api/nftProfile"
    ],
    enabled: !!signMessage
  })
  const contractWrite = useContractWrite(prepareContractWrite?.config)

  const signMessageRandomWallet = async (privateKey, message) => {
    const wallet = new Wallet(privateKey);
    const msghash = utils.solidityKeccak256(["bytes12"], [message]);
    const sign = await wallet.signMessage(utils.arrayify(msghash));
    return sign;
  };

  const handleDeploy = async () => {
    try {
      if (isLoading || error) return alert('no signer')

      setShowLoading(true)

      // Mint NFTs
      const MintNFT = new ContractFactory(
        CampaignERC721Abi,
        CampaignERC721Bytecode,
        data,
      )

      const nft = await MintNFT.deploy(
        "0x84a0856b038eaAd1cC7E297cF34A7e72685A8693",
        "0x6314366bd52be1fb78274d6a",
        address,// <-- your walletaddress
        "Sans NFT",
        "SNFT",
        "This is a test description",
        "0x63c5071b57273ebfcd1c0a44",
        "0xfa291557a4b526785c28677a4a5f0921d2c66a5dce9e2049b03a367cfaf26b74",
        "1891584796"
      )

      await nft.deployed()
      setContractAddress(nft.address)
      // Track Mint
      alert(`deploy contract success to: ${nft.address}`)
    } catch (ex) {
    } finally {
      setShowLoading(false)
    }
  }

  const handleChange = (e) => {
    console.log(e.target.id);
    setContractAddress(e.target.value.trim())
    // setFormData({
    //   ...formData,
    //   [e.target.id]: e.target.value.trim()
    // });

  };

  const handlePrivateKeyChange = async (e) => {
    if (!e.target.value.trim()) return
    let res = await signMessageRandomWallet(e.target.value.trim(), message || "0x63c5071b57273ebfcd1c0a44");
    console.log(res);
    setSignMessage(res)
  }

  const handleMint = async () => {
    if (!contractAddress) return alert("please deploy contract")
    if (!signMessage) return alert("please input privatekey, if you know what are you doing now")
    contractWrite?.write?.()
  }

  useEffect(() => {
    console.log(contractWrite);
    setShowLoading(contractWrite.isLoading)
    if (contractWrite?.isError) {
      console.error(contractWrite.error);
    }
    if (prepareContractWrite?.isError && signMessage) {
      console.error(prepareContractWrite?.error);
    }
  }, [contractWrite.isLoading, contractWrite.isError, prepareContractWrite.isError])


  const handleSubmit = (e) => {
    e.preventDefault();
    console.log(formData);
    return false
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <div className={styles.ldsRoller}>{showLoading && <><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></>}</div>
        <div className={styles.formBox} >
          <form onSubmit={handleSubmit}>
            {/* <div className={styles.inputBox} >
              <label for="name" >name</label>
              <input id="name" onChange={handleChange} ></input>
            </div>
            <div className={styles.inputBox}>
              <label for="symbol" >symbol</label>
              <input id="symbol" onChange={handleChange}></input>
            </div>
            <button type="submit" className={styles.submitButton} ><span>
              submit</span></button> */}
            <div className={styles.inputBox}>
              <label for="contract" >set contract addr or use deploy</label>
              <input id="contract" onChange={handleChange} placeholder="your contract addr" ></input>
            </div>

            <button type="submit" className={styles.submitButton} onClick={handleDeploy} ><span>
              deploy</span></button>
            <div className={styles.inputBox} style={{ marginBottom: "20px" }}>
              your contract addr is: {contractAddress || "null"}
            </div>
            <div className={styles.inputBox}>
              <label for="privatekey" >privatekey here</label>
              <input type="text" id="privatekey" onChange={handlePrivateKeyChange} />
            </div>
            <div className={styles.inputBox}>
              <label for="message" >input message here</label>
              <input type="text" id="message" defaultValue={"0x63c5071b57273ebfcd1c0a44"} onChange={(e) => setMessage(e.target.value)} />
            </div>
            <button onClick={handleMint} className={styles.submitButton}  ><span>
              mint</span></button>
          </form>
        </div>
      </main>
    </div>
  );
};

export default Home;
